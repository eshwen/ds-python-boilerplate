[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ds-python-boilerplate"
version = "0.6.1"
description = "Boilerplate for data science projects in Python"
authors = ["Eshwen Bhal, PhD <milanman.eshb@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "~3.10"

# Terminal colours
colorama = "*"

# Data processing
pandas = {version = "^2.0.3", extras=["performance", "visualisation", "computation", "excel", "sql-other"]}

# Machine learning
#tensorflow-macos = "*"
scikit-learn = "*"

# Data validation
pydantic = { version = "^2.3.0", extras=["settings"] }
pandera = "*"

# SQL databases
SQLAlchemy = "*"

# APIs
fastapi = "^0.100.0"
uvicorn = "*"
requests = "^2.31.0"

# Stats
statsmodels = "*"

# Visualisation
matplotlib = "*"
seaborn = "*"
plotly = "*"

# Configs
PyYAML = "*"

# Jupyter notebooks
jupyter = "*"
jupyterlab = "*"
voila = "*"

[tool.poetry.group.dev.dependencies]
docker = "*"
build = "*"
pre-commit = "^2.20.0"
black = { version = "^22.10.0", extras = ["jupyter"] }
ruff = "^0.0.254"

# Type hinting
mypy = "^0.982"
pandas-stubs = "^2.0.3"

[tool.poetry.group.test.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "*"
pytest-mock = "*"
pytest-cov = "*"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.0"
pymdown-extensions = "*"
mkdocs-material = "^9.1.17"
mkdocstrings = { version = "*", extras = ["python"] }
mkgendocs = "*"
termynal = "*"

[tool.black]
target-version = ['py310']
line-length = 120

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true

[tool.ruff]
target-version = "py310"
line-length = 120
ignore-init-module-imports = true

select = [
    "D",
    "E",
    "F",
    "I",
    "N",
    "W",
    "ARG",
    "ICN",
    "PD",
    "PL",
    "PTH",
    "NPY",
    "RUF"
]

ignore = [
    "ARG001", # ARG001 complains when a function has an unused argument
    "ARG002", # ARG002 complains when a method has an unused argument
    'D301', # D301 complains when a docstring has a backslash and isn't a raw string
    'D107', # D107 complains when there is no docstring in an __init__ method
    "F401", # F401 complains when an import is unused in an __init__ file
]

extend-exclude = [
    ".venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "D104", # D104 complains when there is no docstring in a module
]
"tests/*" = [
    "D100", # D100 complains when there is no docstring in a module
    "D103", # D103 complains when there is no docstring in a function
]


[tool.ruff.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-v -s --cov"
testpaths = [
    "tests",
]
asyncio_mode = "auto"
