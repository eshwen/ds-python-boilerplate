{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"README \u2693\ufe0e Boilerplate for data science projects in Python. Check out the docs by clicking the badge above.","title":"Homepage"},{"location":"#readme","text":"Boilerplate for data science projects in Python. Check out the docs by clicking the badge above.","title":"README"},{"location":"documentation/","text":"Documentation \u2693\ufe0e This repository uses Google-Style for documentation. Run pydocstyle to check the format of docstrings: python -m pydocstyle --count --convention google --add-ignore D301,D212,D107 --match-dir '(?!(tests)).*' --match '(?!__init__).*\\.py' API documentation \u2693\ufe0e API documentation is built with MkDocs using the Material theme. To build a static copy locally, run mkdocs build Then open the homepage HTML file under site/index.html . Or, to render it live on a local server, run mkdocs serve For a Sphinx implementation of documentation, see https://github.com/eshwen/ds-python-boilerplate/releases/tag/v0.1.1 . Extensions and plugins \u2693\ufe0e termynal : animated code blocks similar to the FastAPI docs Installed as a Python package in pyproject.toml Added to the plugins section of mkdocs.yml python hello_world.py ---> Transmitting greeting... Hello world! TODO: Add extension and plugin descriptions.","title":"Documentation"},{"location":"documentation/#documentation","text":"This repository uses Google-Style for documentation. Run pydocstyle to check the format of docstrings: python -m pydocstyle --count --convention google --add-ignore D301,D212,D107 --match-dir '(?!(tests)).*' --match '(?!__init__).*\\.py'","title":"Documentation"},{"location":"documentation/#api-documentation","text":"API documentation is built with MkDocs using the Material theme. To build a static copy locally, run mkdocs build Then open the homepage HTML file under site/index.html . Or, to render it live on a local server, run mkdocs serve For a Sphinx implementation of documentation, see https://github.com/eshwen/ds-python-boilerplate/releases/tag/v0.1.1 .","title":"API documentation"},{"location":"documentation/#extensions-and-plugins","text":"termynal : animated code blocks similar to the FastAPI docs Installed as a Python package in pyproject.toml Added to the plugins section of mkdocs.yml python hello_world.py ---> Transmitting greeting... Hello world! TODO: Add extension and plugin descriptions.","title":"Extensions and plugins"},{"location":"general-python-tips/","text":"General Python tips \u2693\ufe0e Use the built-in pathlib library for local file handling over os.path Type hint functions and methods Run an async coroutine with asyncio.run(<call to coroutine>) Follow Google's Python style guide: https://google.github.io/styleguide/pyguide.html","title":"General Python Tips"},{"location":"general-python-tips/#general-python-tips","text":"Use the built-in pathlib library for local file handling over os.path Type hint functions and methods Run an async coroutine with asyncio.run(<call to coroutine>) Follow Google's Python style guide: https://google.github.io/styleguide/pyguide.html","title":"General Python tips"},{"location":"getting-started/","text":"Installation \u2693\ufe0e Programs \u2693\ufe0e Docker Visual Studio Code/PyCharm GitHub Desktop (optional) macOS Other # Rosetta for compatibility with Intel softwareupdate --install-rosetta # Homebrew /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" brew install --cask docker brew install --cask visual-studio-code # or brew install --cask pycharm brew install --cask github See https://github.com/eshwen/macOS-setup for more useful setup tips. Find the links on for these programs on the web Development Container \u2693\ufe0e Visual Studio Code PyCharm Install the Remote - Containers extension ( ms-vscode-remote.remote-containers ) Open this project as a folder A prompt should appear to open it in a container. Ensure Docker is installed and running so the container can be built. The devcontainer encompasses the following: Building the Docker container that contains a recent Python image Installing the project dependencies Installing VS Code workspace extensions Applying custom settings to aforementioned extensions Under the interpreters tab on the bottom row, hit Add New Interpreter -> On Docker... If the Docker server is blank, in the dropdown menu click Create new... -> Ok Select the correct Dockerfile Set the Context folder to . Uncheck the box Rebuild image automatically every time before running code Optionally, add an image tag to identify it later Hit Next and let the container build On the final page, the default interpreter should be sufficient Poetry \u2693\ufe0e Install Poetry \u2693\ufe0e First, install Poetry. This can be done through Official installer Homebrew (on ) pip See https://python-poetry.org/docs/#installation brew install poetry pip install poetry To ensure Poetry is up to date, run poetry self update Then create the virtualenv environment with poetry shell Install the project \u2693\ufe0e Command line PyCharm To install everything from this project's Poetry configuration, run poetry install To only install the core dependencies, instead run poetry install --without dev,test,docs It will create a virtualenv environment for you, so you don't need to run it in conjunction with another environment manager, such as conda. Open the project Click Add New Interpreter -> Add Local Interpreter... -> Poetry Environment Check Poetry Environment For the Base Interpreter , the default option will probably do as Poetry will create a virtualenv environment to install everything inside Creating your own configuration \u2693\ufe0e To create your own Poetry configuration in pyproject.toml , run poetry init and follow the instructions. Then to port any dependencies from requirements.txt and requirements-dev.txt , run cat requirements.txt | grep -E '^[^# ]' | cut -d = -f1 | xargs -n 1 poetry add cat requirements-dev.txt | grep -E '^[^# ]' | cut -d = -f1 | xargs -n 1 poetry add --group dev Dependencies can be segmented into different groups. See pyproject.toml . It is recommended to maintain dependencies with Poetry, and export them to requirements.txt and requirements-dev.txt if needed, e.g., poetry export --without-hashes -f requirements.txt -o requirements.txt poetry export --without-hashes --only dev -f requirements.txt -o requirements-dev.txt Conda \u2693\ufe0e For a lightweight experience, install miniconda . This can be done through Homebrew (on ) Other brew install --cask miniconda Figure it out Then initialise conda: conda init \" $( basename \" ${ SHELL } \" ) \" < exit and reopen terminal> Create your environment: conda create -y -n my_project conda activate my_project conda config --set auto_activate_base false # Don't automatically activate base env when opening terminal conda install -y python = 3 .10 pip install --upgrade pip And finally, install the requirements: cd <root dir of project> pip install -r requirements.txt pip install -r requirements-dev.txt","title":"Getting Started"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#programs","text":"Docker Visual Studio Code/PyCharm GitHub Desktop (optional) macOS Other # Rosetta for compatibility with Intel softwareupdate --install-rosetta # Homebrew /bin/bash -c \" $( curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh ) \" brew install --cask docker brew install --cask visual-studio-code # or brew install --cask pycharm brew install --cask github See https://github.com/eshwen/macOS-setup for more useful setup tips. Find the links on for these programs on the web","title":"Programs"},{"location":"getting-started/#development-container","text":"Visual Studio Code PyCharm Install the Remote - Containers extension ( ms-vscode-remote.remote-containers ) Open this project as a folder A prompt should appear to open it in a container. Ensure Docker is installed and running so the container can be built. The devcontainer encompasses the following: Building the Docker container that contains a recent Python image Installing the project dependencies Installing VS Code workspace extensions Applying custom settings to aforementioned extensions Under the interpreters tab on the bottom row, hit Add New Interpreter -> On Docker... If the Docker server is blank, in the dropdown menu click Create new... -> Ok Select the correct Dockerfile Set the Context folder to . Uncheck the box Rebuild image automatically every time before running code Optionally, add an image tag to identify it later Hit Next and let the container build On the final page, the default interpreter should be sufficient","title":"Development Container"},{"location":"getting-started/#poetry","text":"","title":"Poetry"},{"location":"getting-started/#install-poetry","text":"First, install Poetry. This can be done through Official installer Homebrew (on ) pip See https://python-poetry.org/docs/#installation brew install poetry pip install poetry To ensure Poetry is up to date, run poetry self update Then create the virtualenv environment with poetry shell","title":"Install Poetry"},{"location":"getting-started/#install-the-project","text":"Command line PyCharm To install everything from this project's Poetry configuration, run poetry install To only install the core dependencies, instead run poetry install --without dev,test,docs It will create a virtualenv environment for you, so you don't need to run it in conjunction with another environment manager, such as conda. Open the project Click Add New Interpreter -> Add Local Interpreter... -> Poetry Environment Check Poetry Environment For the Base Interpreter , the default option will probably do as Poetry will create a virtualenv environment to install everything inside","title":"Install the project"},{"location":"getting-started/#creating-your-own-configuration","text":"To create your own Poetry configuration in pyproject.toml , run poetry init and follow the instructions. Then to port any dependencies from requirements.txt and requirements-dev.txt , run cat requirements.txt | grep -E '^[^# ]' | cut -d = -f1 | xargs -n 1 poetry add cat requirements-dev.txt | grep -E '^[^# ]' | cut -d = -f1 | xargs -n 1 poetry add --group dev Dependencies can be segmented into different groups. See pyproject.toml . It is recommended to maintain dependencies with Poetry, and export them to requirements.txt and requirements-dev.txt if needed, e.g., poetry export --without-hashes -f requirements.txt -o requirements.txt poetry export --without-hashes --only dev -f requirements.txt -o requirements-dev.txt","title":"Creating your own configuration"},{"location":"getting-started/#conda","text":"For a lightweight experience, install miniconda . This can be done through Homebrew (on ) Other brew install --cask miniconda Figure it out Then initialise conda: conda init \" $( basename \" ${ SHELL } \" ) \" < exit and reopen terminal> Create your environment: conda create -y -n my_project conda activate my_project conda config --set auto_activate_base false # Don't automatically activate base env when opening terminal conda install -y python = 3 .10 pip install --upgrade pip And finally, install the requirements: cd <root dir of project> pip install -r requirements.txt pip install -r requirements-dev.txt","title":"Conda"},{"location":"helpful-articles/","text":"Helpful articles \u2693\ufe0e Python versions in Docker: https://medium.com/swlh/alpine-slim-stretch-buster-jessie-bullseye-bookworm-what-are-the-differences-in-docker-62171ed4531d Emoji suggestions for git: https://gitmoji.dev/ Semantic versioning: https://semver.org/","title":"Helpful Articles"},{"location":"helpful-articles/#helpful-articles","text":"Python versions in Docker: https://medium.com/swlh/alpine-slim-stretch-buster-jessie-bullseye-bookworm-what-are-the-differences-in-docker-62171ed4531d Emoji suggestions for git: https://gitmoji.dev/ Semantic versioning: https://semver.org/","title":"Helpful articles"},{"location":"pipelines/","text":"Pipelines \u2693\ufe0e Several pipelines are included to execute automatically on various triggers: build.yml (to build the project) dependabot.yml (to check for updates and vulnerabilities in dependencies, the Docker container, and the other pipelines) TODO: Add documentation and CodeQL pipelines. Flesh out build and dependabot more (coverage, etc.).","title":"Pipelines"},{"location":"pipelines/#pipelines","text":"Several pipelines are included to execute automatically on various triggers: build.yml (to build the project) dependabot.yml (to check for updates and vulnerabilities in dependencies, the Docker container, and the other pipelines) TODO: Add documentation and CodeQL pipelines. Flesh out build and dependabot more (coverage, etc.).","title":"Pipelines"},{"location":"my_project/hello_world/","text":"Test file. do_a_dataframe_thing ( df , arr = None ) \u2693\ufe0e An example of documentation with references to external libraries. Parameters: Name Type Description Default df pd . DataFrame Input dataframe. required arr np . ndarray | None Input array. None See Also An explicit reference to a dataframe: pandas.DataFrame for an explicit reference. Or a numpy array: numpy.array . Returns: Type Description pd . DataFrame A dataframe with some magical operation applied to it. Source code in my_project/hello_world.py def do_a_dataframe_thing ( df : pd . DataFrame , arr : np . ndarray | None = None ) -> pd . DataFrame : \"\"\"An example of documentation with references to external libraries. Args: df: Input dataframe. arr: Input array. See Also: An explicit reference to a dataframe: [pandas.DataFrame][] for an explicit reference. Or a numpy array: [numpy.array][]. Returns: A dataframe with some magical operation applied to it. \"\"\" if arr is not None and arr . size > 0 : return df [ arr ] return df hello_world () \u2693\ufe0e Returns \"Hello World!\" when called. Returns: Name Type Description str str The string 'Hello world!'. Example >>> hello_world () 'Hello World!' Note This is an example of a note. Warning This is an example of a warning. Source code in my_project/hello_world.py def hello_world () -> str : \"\"\"Returns \"Hello World!\" when called. Returns: str: The string 'Hello world!'. Example: ```python >>> hello_world() 'Hello World!' ``` Note: This is an example of a note. Warning: This is an example of a warning. \"\"\" return \"Hello World!\"","title":"hello_world"},{"location":"my_project/hello_world/#my_project.hello_world.do_a_dataframe_thing","text":"An example of documentation with references to external libraries. Parameters: Name Type Description Default df pd . DataFrame Input dataframe. required arr np . ndarray | None Input array. None See Also An explicit reference to a dataframe: pandas.DataFrame for an explicit reference. Or a numpy array: numpy.array . Returns: Type Description pd . DataFrame A dataframe with some magical operation applied to it. Source code in my_project/hello_world.py def do_a_dataframe_thing ( df : pd . DataFrame , arr : np . ndarray | None = None ) -> pd . DataFrame : \"\"\"An example of documentation with references to external libraries. Args: df: Input dataframe. arr: Input array. See Also: An explicit reference to a dataframe: [pandas.DataFrame][] for an explicit reference. Or a numpy array: [numpy.array][]. Returns: A dataframe with some magical operation applied to it. \"\"\" if arr is not None and arr . size > 0 : return df [ arr ] return df","title":"do_a_dataframe_thing()"},{"location":"my_project/hello_world/#my_project.hello_world.hello_world","text":"Returns \"Hello World!\" when called. Returns: Name Type Description str str The string 'Hello world!'. Example >>> hello_world () 'Hello World!' Note This is an example of a note. Warning This is an example of a warning. Source code in my_project/hello_world.py def hello_world () -> str : \"\"\"Returns \"Hello World!\" when called. Returns: str: The string 'Hello world!'. Example: ```python >>> hello_world() 'Hello World!' ``` Note: This is an example of a note. Warning: This is an example of a warning. \"\"\" return \"Hello World!\"","title":"hello_world()"}]}